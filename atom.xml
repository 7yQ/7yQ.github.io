<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>7yQ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-24T05:49:18.329Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>7yQ_z</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/06/24/hello-world/"/>
    <id>http://yoursite.com/2020/06/24/hello-world/</id>
    <published>2020-06-24T05:49:18.329Z</published>
    <updated>2020-06-24T05:49:18.329Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>matplotlib修改中文</title>
    <link href="http://yoursite.com/2020/06/23/matplotlib%E4%BF%AE%E6%94%B9%E4%B8%AD%E6%96%87/"/>
    <id>http://yoursite.com/2020/06/23/matplotlib%E4%BF%AE%E6%94%B9%E4%B8%AD%E6%96%87/</id>
    <published>2020-06-23T02:49:35.000Z</published>
    <updated>2020-06-23T02:57:10.704Z</updated>
    
    <content type="html"><![CDATA[<h3 id="matplotlib-中文问题"><a href="#matplotlib-中文问题" class="headerlink" title="matplotlib 中文问题"></a>matplotlib 中文问题</h3><p>首先这个是一个mac和win系统通用的方法 我们正常绘制一个简单图片，增加一个title，title设置为中文的年份</p><p>mport matplotlib.pyplot as plt<br>fig = plt.figure(figsize=(10,6))<br>plt.title(“年份”)<br>plt.plot([1,2,3,4] [5,6,7,8])<br>plt.show()</p><p>生成的图片中文非正常显示</p><p>接下来我们解决这个问题</p><p>import matplotlib.pyplot as plt<br>from matplotlib.font_manager import FontProperties<br>font = FontProperties(fname=r”/Users/zoey//Desktop/data/STSONG.TTF”, size=15)<br>fig = plt.figure(figsize=(10,6))<br>plt.title(u”年份”, fontproperties=font)<br>plt.plot([1,2,3,4] [5,6,7,8])<br>plt.show()</p><p>生成的图片中文正常显示</p><p>我们导入了Font Propert ies，并使用它指定了字体的路径，在需要书写中文的地方增加 fontproperties=font 就ok!</p><p>字体文件已经放在本文件夹的dat a文件夹中，只需要把dat a文件放在电脑卓桌面上，然后把文件的路径写在参数后边</p><p>FontProperties(fname=r”路径写在这里”, size=15) size是设置字体大小</p><p>❣️</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;matplotlib-中文问题&quot;&gt;&lt;a href=&quot;#matplotlib-中文问题&quot; class=&quot;headerlink&quot; title=&quot;matplotlib 中文问题&quot;&gt;&lt;/a&gt;matplotlib 中文问题&lt;/h3&gt;&lt;p&gt;首先这个是一个mac和win系统通用
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python发送邮件</title>
    <link href="http://yoursite.com/2020/06/23/python%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/06/23/python%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</id>
    <published>2020-06-23T02:47:22.000Z</published>
    <updated>2020-06-23T02:49:11.738Z</updated>
    
    <content type="html"><![CDATA[<h3 id="发送邮件代码详解"><a href="#发送邮件代码详解" class="headerlink" title="发送邮件代码详解"></a>发送邮件代码详解</h3><p>from email.mime.text import MIMEText<br>‘’’<br> email模块负责构造邮件<br> 类email.mime.text.MIMEText(_text)，是使用字符串_text来生成MIME对象的主体文本<br> MIME是(Multipurpose Internet Mail Extensions) 多用途互联网邮件扩展类型<br> MIME是设置将某种扩展名文件用一种应用程序来打开的方式类型<br> MIME设置的目的是为了在发送电子邮件时附加多媒体数据，让邮件根据其类型进行处理。<br>‘’’<br>import smtplib<br>‘’’<br> smtplib模块负责发送邮件<br> 类smtplib.SMTP([host[, port[, local_hostname[, timeout]]]]) ：SMTP对象<br> 其中，host：smtp服务器主机名<br> 其中，port：smtp服务器的端口，默认是25<br> 如果在创建SMTP对象时定义了这两个参数，在初始化时会自动调用connect方式连接服务器<br> smtplib模块还提供了SMTP_SSL类和LMTP类，对它们的操作与SMTP基本一致。<br> SSL是一种安全传输，LMTP是与SMTP不同的另一种传输协议<br>‘’’<br>from email.header import Header<br>‘’’<br> 如果你想让你的邮件标题使用非ASCII字符集，就要使用email.header编码非ASCII字符集<br> email.header.Header(s=None, charset=None, maxlinelen=None, header_name=None, continuation_ws=’ ‘, errors=’strict’)<br> 创建一个能容纳不同字符集的字符串的MIME对象的标头<br> 其中，s：初始标头，即要编码之前的标头<br> 其中，chatset：字符集，默认为ASCII<br> 其中，maxlinelen：标头名的行的最大长度，默认为76<br> 其中，header_name：标头名，默认无<br> 其中，continuation_ws：默认为单个空格字符<br> 其中，errors：直接传递到Header的append()方法里<br>‘’’<br>from email.utils import parseaddr, formataddr<br>‘’’<br> email.utils:杂项工具<br> email.utils.parseaddr(address):解析地址的功能，<br> 其中，address是一个包含用户名和email地址的值（realname<address>），返回一个二元组(realname, email address)<br> email.utils.formataddr(pair, charset=’utf-8’)<br> 其中，pair是二元组(realname, email address)<br> 其中，charset是字符串，默认为utf-8<br> 实际上，parseaddr(), formataddr(),两者互逆<br>‘’’<br>from email.mime.base import MIMEBase<br>‘’’<br> email.mime.base.MIMEBase(_maintype, _subtype, *<em>_params)<br> 这是MIME的一个基类。一般不需要在使用时创建实例。<br> 其中_maintype是内容类型，如text或者image。<br> _subtype是内容的minor type 类型，如plain或者gif。<br> *</em>_params是一个字典，直接传递给Message.add_header()。<br>‘’’<br>from email.mime.multipart import MIMEMultipart<br>‘’’<br> email.mime.multipart.MIMEMultipart(_subtype=’mixed’, boundary=None, _subparts=None, **_params)<br> MIMEMultipart是MIMEBase的一个子类，多个MIME对象的集合<br> _subtype默认值为mixed。boundary是MIMEMultipart的边界，默认边界是可数的。<br>‘’’<br>from email import encoders<br>‘’’<br> email.encoders 功能是编码器<br>‘’’<br>def _format_addr(s):<br>    # 这个函数的作用是把一个标头的用户名编码成utf-8格式的，如果不编码原标头中文用户名，用户名将无法被邮件解码<br>    name, addr = parseaddr(s)<br>    return formataddr((Header(name, “utf-8”).encode(), addr))<br>    # Header().encode(splitchars=’;, \t’, maxlinelen=None, linesep=’\n’)<br>    # 功能：编码一个邮件标头，使之变成一个RFC兼容的格式</p><h1 id="先定义Email的地址，口令和SMTP服务器地址"><a href="#先定义Email的地址，口令和SMTP服务器地址" class="headerlink" title="先定义Email的地址，口令和SMTP服务器地址"></a>先定义Email的地址，口令和SMTP服务器地址</h1><p>from_addr = “<a href="mailto:x1@qq.com">x1@qq.com</a>“<br>password = input(“请输入发送邮箱的密码:”)<br>to_addr = “<a href="mailto:x2@163.com">x2@163.com</a>“<br>smtp_server = “smtp.qq.com”</p><h1 id="接下来定义邮件本身的内容"><a href="#接下来定义邮件本身的内容" class="headerlink" title="接下来定义邮件本身的内容"></a>接下来定义邮件本身的内容</h1><p>msg = MIMEMultipart()<br>msg[“From”] = _format_addr(“发送者ReedSun &lt;%s&gt;” % from_addr)<br>msg[“To”] = _format_addr(“接收者ReedSun &lt;%s&gt;” % to_addr)<br>msg[“Subject”] = Header(“哈哈哈 这是一封测试信”, “utf-8”).encode()</p><h1 id="定义邮件正文"><a href="#定义邮件正文" class="headerlink" title="定义邮件正文"></a>定义邮件正文</h1><p>msg.attach(MIMEText(“这是一封来自大魔王ReedSun，用Python发来的邮件”, “plain”, “utf-8”))</p><h1 id="class-email-mime-text-MIMEText-text-subtype-charset-：MIME文本对象，"><a href="#class-email-mime-text-MIMEText-text-subtype-charset-：MIME文本对象，" class="headerlink" title="class email.mime.text.MIMEText(_text[, _subtype[, _charset]])：MIME文本对象，"></a>class email.mime.text.MIMEText(_text[, _subtype[, _charset]])：MIME文本对象，</h1><h1 id="其中-text是邮件内容，"><a href="#其中-text是邮件内容，" class="headerlink" title="其中, _text是邮件内容，"></a>其中, _text是邮件内容，</h1><h1 id="其中-subtype邮件类型-MIME类型-，可以是text-plain（普通文本邮件），html-plain-html邮件"><a href="#其中-subtype邮件类型-MIME类型-，可以是text-plain（普通文本邮件），html-plain-html邮件" class="headerlink" title="其中, _subtype邮件类型(MIME类型)，可以是text/plain（普通文本邮件），html/plain(html邮件),"></a>其中, _subtype邮件类型(MIME类型)，可以是text/plain（普通文本邮件），html/plain(html邮件),</h1><h1 id="其中-charset编码（charset：字符集），可以是gb2312等等。"><a href="#其中-charset编码（charset：字符集），可以是gb2312等等。" class="headerlink" title="其中, _charset编码（charset：字符集），可以是gb2312等等。"></a>其中, _charset编码（charset：字符集），可以是gb2312等等。</h1><h1 id="message-attch-payload-将给定的附件或信息，添加到已有的有效附件或信息中，在调用之前必须是None或者List，调用后。payload将变成信息对象的列表"><a href="#message-attch-payload-将给定的附件或信息，添加到已有的有效附件或信息中，在调用之前必须是None或者List，调用后。payload将变成信息对象的列表" class="headerlink" title="message.attch(payload) 将给定的附件或信息，添加到已有的有效附件或信息中，在调用之前必须是None或者List，调用后。payload将变成信息对象的列表"></a>message.attch(payload) 将给定的附件或信息，添加到已有的有效附件或信息中，在调用之前必须是None或者List，调用后。payload将变成信息对象的列表</h1><h1 id="如果你想将payload设置成一个标量对象，要使用set-payload"><a href="#如果你想将payload设置成一个标量对象，要使用set-payload" class="headerlink" title="如果你想将payload设置成一个标量对象，要使用set_payload()"></a>如果你想将payload设置成一个标量对象，要使用set_payload()</h1><p>with open(‘c:/work/test.jpg’, ‘rb’) as f:<br>    mime = MIMEBase(“image”, “jpg”, filename=”test.jpg”)<br>    mime.add_header(“Content-Disposition”, “attchment”, filename=”test.jpg”)<br>    # add_header(_name, _value, <em>*_params) 扩展标头设置<br>    # _name：要添加的标头字段<br>    # _value：标头的内容<br>    # Content-Disposition就是当用户想把请求所得的内容存为一个文件的时候提供一个默认的文件名。<br>    # 希望某类或者某已知MIME 类型的文件（比如：</em>.gif;<em>.txt;</em>.htm）能够在访问时弹出“文件下载”对话框。<br>    mime.add_header(“Content-ID”, “&lt;0&gt;”)<br>    mime.add_header(“X-Attachment-Id”, “0”)<br>    mime.set_payload(f.read())<br>    # set_payload(payload, charset=None)<br>    # 将附件添加到payload中<br>    encoders.encode_base64(mime)<br>    # encoders.encode_base64(mime) 将payload内容编码为base64格式<br>    msg.attach(mime)</p><h1 id="接下来定义发送文件"><a href="#接下来定义发送文件" class="headerlink" title="接下来定义发送文件"></a>接下来定义发送文件</h1><p>server = smtplib.SMTP_SSL(smtp_server, 465)</p><h1 id="qq邮箱使用SSL连接，端口为465"><a href="#qq邮箱使用SSL连接，端口为465" class="headerlink" title="qq邮箱使用SSL连接，端口为465"></a>qq邮箱使用SSL连接，端口为465</h1><p>server.set_debuglevel(1)</p><h1 id="SMTP-set-debuglevel-level-：设置是否为调试模式。默认为False，即非调试模式，"><a href="#SMTP-set-debuglevel-level-：设置是否为调试模式。默认为False，即非调试模式，" class="headerlink" title="SMTP.set_debuglevel(level)：设置是否为调试模式。默认为False，即非调试模式，"></a>SMTP.set_debuglevel(level)：设置是否为调试模式。默认为False，即非调试模式，</h1><h1 id="非调试模式：表示不输出任何调试信息。"><a href="#非调试模式：表示不输出任何调试信息。" class="headerlink" title="非调试模式：表示不输出任何调试信息。"></a>非调试模式：表示不输出任何调试信息。</h1><p>server.login(from_addr, password)</p><h1 id="登陆到smtp服务器。"><a href="#登陆到smtp服务器。" class="headerlink" title="登陆到smtp服务器。"></a>登陆到smtp服务器。</h1><h1 id="现在几乎所有的smtp服务器，都必须在验证用户信息合法之后才允许发送邮件。"><a href="#现在几乎所有的smtp服务器，都必须在验证用户信息合法之后才允许发送邮件。" class="headerlink" title="现在几乎所有的smtp服务器，都必须在验证用户信息合法之后才允许发送邮件。"></a>现在几乎所有的smtp服务器，都必须在验证用户信息合法之后才允许发送邮件。</h1><p>server.sendmail(from_addr, [to_addr], msg.as_string())</p><h1 id="SMTP-sendmail-from-addr-to-addrs-msg-mail-options-rcpt-options-：发送邮件。"><a href="#SMTP-sendmail-from-addr-to-addrs-msg-mail-options-rcpt-options-：发送邮件。" class="headerlink" title="SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options]) ：发送邮件。"></a>SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options]) ：发送邮件。</h1><h1 id="这里要注意一下第三个参数，msg是字符串，表示邮件。"><a href="#这里要注意一下第三个参数，msg是字符串，表示邮件。" class="headerlink" title="这里要注意一下第三个参数，msg是字符串，表示邮件。"></a>这里要注意一下第三个参数，msg是字符串，表示邮件。</h1><h1 id="我们知道邮件一般由标题，发信人，收件人，邮件内容，附件等构成，"><a href="#我们知道邮件一般由标题，发信人，收件人，邮件内容，附件等构成，" class="headerlink" title="我们知道邮件一般由标题，发信人，收件人，邮件内容，附件等构成，"></a>我们知道邮件一般由标题，发信人，收件人，邮件内容，附件等构成，</h1><h1 id="发送邮件的时候，要注意msg的格式。这个格式就是smtp协议中定义的格式。"><a href="#发送邮件的时候，要注意msg的格式。这个格式就是smtp协议中定义的格式。" class="headerlink" title="发送邮件的时候，要注意msg的格式。这个格式就是smtp协议中定义的格式。"></a>发送邮件的时候，要注意msg的格式。这个格式就是smtp协议中定义的格式。</h1><h1 id="第二个参数，接受邮箱为一个列表，表示可以设置多个接受邮箱"><a href="#第二个参数，接受邮箱为一个列表，表示可以设置多个接受邮箱" class="headerlink" title="第二个参数，接受邮箱为一个列表，表示可以设置多个接受邮箱"></a>第二个参数，接受邮箱为一个列表，表示可以设置多个接受邮箱</h1><h1 id="as-string-是MIMEMessage对象的一个方法，表示把MIMETest对象变成str"><a href="#as-string-是MIMEMessage对象的一个方法，表示把MIMETest对象变成str" class="headerlink" title="as_string()是MIMEMessage对象的一个方法，表示把MIMETest对象变成str"></a>as_string()是MIMEMessage对象的一个方法，表示把MIMETest对象变成str</h1><p>server.quit()</p><h1 id="断开与smtp服务器的连接，相当于发送”quit”指令。"><a href="#断开与smtp服务器的连接，相当于发送”quit”指令。" class="headerlink" title="断开与smtp服务器的连接，相当于发送”quit”指令。"></a>断开与smtp服务器的连接，相当于发送”quit”指令。</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;发送邮件代码详解&quot;&gt;&lt;a href=&quot;#发送邮件代码详解&quot; class=&quot;headerlink&quot; title=&quot;发送邮件代码详解&quot;&gt;&lt;/a&gt;发送邮件代码详解&lt;/h3&gt;&lt;p&gt;from email.mime.text import MIMEText&lt;br&gt;‘’’&lt;br
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>mac配置chromedriver</title>
    <link href="http://yoursite.com/2020/06/23/mac%E9%85%8D%E7%BD%AEchromedriver/"/>
    <id>http://yoursite.com/2020/06/23/mac%E9%85%8D%E7%BD%AEchromedriver/</id>
    <published>2020-06-23T02:42:54.000Z</published>
    <updated>2020-06-23T02:46:42.691Z</updated>
    
    <content type="html"><![CDATA[<p>咱们讲解一下说一下关于mac系统配置chromedriver的问题，请同学们按照下方步骤一步一步操作～</p><h3 id="一-遇到的最主要问题"><a href="#一-遇到的最主要问题" class="headerlink" title="一.遇到的最主要问题"></a>一.遇到的最主要问题</h3><ol><li><p>不知道安装在那个文件夹里</p></li><li><p>可以找到文件夹 但是通过鼠标拖拽无法移动过去</p></li></ol><h3 id="如何配置chromedriver"><a href="#如何配置chromedriver" class="headerlink" title="如何配置chromedriver"></a>如何配置chromedriver</h3><ol><li><p>下载chromedriver，这点就不再赘述，需要注意的是下载对应版本的。</p></li><li><p>下载完成以后，可以先把chromedriver放在桌面上</p></li><li><p>接下来打开终端，依次输入以下命令</p></li></ol><p>cd ../../usr/local/bin/</p><p>open .</p><ol start="4"><li>此时访达打开了对应的文件夹，然后光标选中在桌面上的chromedriver,拖拽至文件夹中</li></ol><p>⚠️: 如果无法拖拽chromedriver，就是指第4步无法完成，打开一个新的终端,执行以下命令</p><p>cd Desktop </p><p>sudo mv chromedriver ./../../../usr/local/bin</p><p>输入上方命令以后，会要求输入密码，咱们输入电脑密码就ok，只管输入，密码不会在终端显示，输入完成按一下回车就ok</p><p>此时再看访达打开的文件夹，咱们的chromedriver已经移动到了咱们的bin文件夹中</p><ol start="5"><li>chromedriver移动到目标文件夹以后，先双击chromedriver,会出现一个提示框，点击好</li></ol><p>打开电脑系统偏好设置，点击安全性与隐私，点击下方的仍要打开，会出现一个提示框，点击打开</p><p>如果出现一个终端，那么chromedriver就配置完成，所有终端都可以关掉。</p><p>pycharm运行代码就ok！</p><p>❣️</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;咱们讲解一下说一下关于mac系统配置chromedriver的问题，请同学们按照下方步骤一步一步操作～&lt;/p&gt;
&lt;h3 id=&quot;一-遇到的最主要问题&quot;&gt;&lt;a href=&quot;#一-遇到的最主要问题&quot; class=&quot;headerlink&quot; title=&quot;一.遇到的最主要问题&quot;&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基于hexo搭建博客</title>
    <link href="http://yoursite.com/2020/06/22/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2020/06/22/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-06-22T03:20:37.000Z</published>
    <updated>2020-06-23T02:41:17.510Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><p>下载 node.js 并安装 , 下载网址为: <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><p>进root,命令： sudo su</p><p>下载cnpm  命令为: npm install -g cnpm –registry=<a href="https://registry.cnpm.taobao.org" target="_blank" rel="noopener">https://registry.cnpm.taobao.org</a></p><h3 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h3><p>创建文件夹并初始化</p><p>mkdir blog</p><p>sudo hexo init</p><p>启动博客 hexo s</p><h3 id="第四步："><a href="#第四步：" class="headerlink" title="第四步："></a>第四步：</h3><p>部署git</p><p>cnpm install –save hexo-deployer-git</p><p>修改_config.yml</p><p>type： git<br>repo: github仓库http地址</p><h3 id="第五步："><a href="#第五步：" class="headerlink" title="第五步："></a>第五步：</h3><p>创建新的md文件</p><p>hexo n ‘博客名’</p><h3 id="第六步："><a href="#第六步：" class="headerlink" title="第六步："></a>第六步：</h3><p>清空缓存</p><p>hexo clean</p><p>提交文件</p><p>hexo g</p><p>上传gtihub</p><p>hexo d</p><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>git clone <a href="https://github.com/yelog/hexo-theme-3-hexo.git" target="_blank" rel="noopener">https://github.com/yelog/hexo-theme-3-hexo.git</a> themes/主题</p><p>修改_config.yml</p><p>themes: 主题</p><h3 id="🌹"><a href="#🌹" class="headerlink" title="🌹"></a>🌹</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一步：&quot;&gt;&lt;a href=&quot;#第一步：&quot; class=&quot;headerlink&quot; title=&quot;第一步：&quot;&gt;&lt;/a&gt;第一步：&lt;/h3&gt;&lt;p&gt;下载 node.js 并安装 , 下载网址为: &lt;a href=&quot;https://nodejs.org/en/&quot; targe
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
